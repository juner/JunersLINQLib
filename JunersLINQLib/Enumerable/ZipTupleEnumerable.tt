<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Juners.Enumerable {
<# 
foreach (var count in Enumerable.Range(2, 21 - 2 + 1))
{
	var range = Enumerable.Range(1, count); #>
    internal class ZipTupleEnumerable<<#
	foreach (var i in range)
	{
		if (i > 1)
		{
			#>, <#
		}
		#>T<#= i #><#
	} #>>
        : IEnumerable<(<#
	foreach (var i in range)
	{
		if (i > 1)
		{
			#>, <#
		}
		#>T<#= i #> Item<#= i #><#
	} #>)> {
<# 
	foreach(var i in range)
	{ #>
        readonly IEnumerable<T<#= i #>> Item<#= i #>;
<# } #>
        readonly ZipNotEnough NotEnough;
        public ZipTupleEnumerable(<#
	foreach (var i in range) 
	{
		if (i > 1)
		{
		#>

            , <#
		}
		#>IEnumerable<T<#= i #>> Item<#= i #><#
	}#>

            , ZipNotEnough NotEnough = default)
            => (<#
	foreach (var i in range)
	{
		#>this.Item<#= i #>, <#
	} #>this.NotEnough)
            = (<#
	foreach (var i in range)
	{
		#>Item<#= i #>, <#
	} #>NotEnough);

        public IEnumerator<(<#
	foreach (var i in range)
	{
		if (i > 1)
		{
			#>, <#
		}
		#>T<#= i #><#
	} #>)> GetEnumerator()
        {
            switch (NotEnough) {
            case ZipNotEnough.Break:
                return GetEnumeratorOrBreak();
            case ZipNotEnough.Default:
                return GetEnumeratorOrDefault();
            }
            throw new NotSupportedException($"{nameof(NotEnough)}({NotEnough}) is NotSupport.");
        }
        private IEnumerator<(<#
	foreach (var i in range)
	{
		if (i > 1)
		{
			#>, <#
		}
		#>T<#= i #><#
	} #>)> GetEnumeratorOrBreak()
        {<#
	foreach (var i in range)
	{ #>

            using (var Enumerator<#= i #> = Item<#= i #>?.GetEnumerator())<#
	} #>

                while (<#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                    && <#
		}
		#>Enumerator<#= i #>.MoveNext()<#
	} #>)
                    yield return
                        (<#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                        , <#
		}
		#>Enumerator<#= i #>.Current<# 
	} #>);
        }
        private IEnumerator<(<#
	foreach (var i in range)
	{
		if (i > 1)
		{
			#>, <#
		}
		#>T<#= i #><#
	} #>)> GetEnumeratorOrDefault()
        {<#
	foreach (var i in range)
	{
			#>

            var DefaultValue<#= i #> = default(T<#= i #>);<#
	} #>
	<#
	foreach (var i in range)
	{
			#>

            using (var Enumerator<#= i #> = Item<#= i #>.GetEnumerator())<#
	} #>

                for (var (<#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                    , <#
		}
		#>MoveNext<#= i #><#
	} #>) = (
                        <#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                        , <#
		}
		#>Enumerator<#= i #>.MoveNext()<#
	} #>);
                    <#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                    || <#
		}
		#>MoveNext<#= i #><#
	} #>;
                    (<#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                    , <#
		}
		#>MoveNext<#= i #><#
	} #>) = (
                        <#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                        , <#
		}
		#>Enumerator<#= i #>.MoveNext()<#
	} #>))
                    yield return (<#
	foreach (var i in range)
	{
		if (i != 1) 
		{ #>

                        , <#
		}
		#>MoveNext<#= i #> ? Enumerator<#= i #>.Current : DefaultValue<#= i #><# 
	} #>);
        }
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
<# } #>
}
